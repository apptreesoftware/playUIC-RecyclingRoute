# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
}
play.crypto.secret = ${?APPLICATION_SECRET}
host = "http://localhost:9000"
play.application.loader = "sdk.SDKApplicationLoader"
apptree.crypto.validate=false
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  //enabled += SampleModule

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}
libraryDependencies += filters

play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    # allowed = [".example.com", "localhost:9000", "localhost:8111"]
  }
}

play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

//ebean.default = ["models.*"]
db.sample.driver = org.h2.Driver
db.sample.url = "jdbc:h2:mem:play"
db.sample.username = sa
db.sample.password = ""
db.sample.jndiName=sample
db.sample.default=true
db.sample.name="sample"

//ebean.sample = ["sdk.sample.model.*"]
ebeanconfig.serverConfigs = [sample]
play.evolutions.autoApply=true
